@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,300,700&subset=latin,cyrillic');
*
{
    box-sizing: border-box;
}
.clearfix
{
    zoom: 1;
}
.clearfix:before,
.clearfix:after
{
    display: table;

    content: '';
}
.clearfix:after
{
    clear: both;
}
body
{
    font-family: 'Open Sans', sans-serif;
    font-size: 20px;
    font-weight: 300;

    position: relative;

    zoom: 1;

    min-width: 1270px;
    max-width: 1920px;
    margin: 0;
    padding: 0;

    color: #000;
    background: #f7f7f7;
}
body:before,
body:after
{
    display: table;

    content: '';
}
body:after
{
    clear: both;
}
*
{
    box-sizing: border-box;
}
a
{
    text-decoration: none;
}
img
{
    max-width: 100%;
}
.wrap
{
    width: 1250px;
    margin: 0 auto;
}
.nav-line
{
    background: #479eaf;
}
.nav-line .wrap nav ul
{
    display: block;
    zoom: 1;

    margin: 0;
    padding: 0;
}
.nav-line .wrap nav ul:before,
.nav-line .wrap nav ul:after
{
    display: table;

    content: '';
}
.nav-line .wrap nav ul:after
{
    clear: both;
}
.nav-line .wrap nav ul li
{
    display: block;
    float: left;

    list-style-type: none;

    transition: .2s;
}
.nav-line .wrap nav ul li.active
{
    background: #ffef2b;
}
.nav-line .wrap nav ul li.active a
{
    color: #000;
}
.nav-line .wrap nav ul li a
{
    font-size: 18px;
    font-weight: 700;

    display: block;

    padding: 16px 49px;

    transition: .2s;

    color: #f7f7f7;
}
.nav-line .wrap nav ul li a:hover
{
    color: #000;
}
header
{
    background: #fff;
}
header .wrap
{
    zoom: 1;

    padding: 10px 0 23px 0;
}
header .wrap:before,
header .wrap:after
{
    display: table;

    content: '';
}
header .wrap:after
{
    clear: both;
}
header .wrap .logo
{
    float: left;

    margin-right: 50px;
}
header .wrap .search-panel
{
    float: left;

    padding-top: 85px;
}
header .wrap .search-panel .search-line
{
    position: relative;
}
header .wrap .search-panel .search-line:after,
header .wrap .search-panel .search-line input:not([type='submit'])
{
    display: block;

    width: 334px;
    height: 33.3px;
    padding: 0 30px 0 10px;

    border: solid 1px #d9d9d9;
    border-radius: 3px;
    background-color: #f6f6f6;
    box-shadow: inset 0 1px 3px 0 rgba(0,0,0,.5);
}
header .wrap .search-panel .search-line input[type='submit']
{
    position: absolute;
    position: absolute;
    top: 7px;
    right: 10px;

    display: block;

    width: 18.5px;
    height: 18.5px;

    cursor: pointer;
    text-indent: -99999px;

    border: 0;
    outline: none;
    background: url('../images/magnifier.svg') no-repeat center;
}
header .wrap .search-panel .search-example
{
    font-size: 14px;
}
header .wrap .search-panel .search-example a
{
    font-weight: 700;

    margin-left: 5px;

    text-decoration: underline;

    color: #479eaf;
}
header .wrap .search-panel .search-example a:hover
{
    text-decoration: none;
}
header .wrap .top-contacts
{
    float: left;
    zoom: 1;

    padding-top: 82px;
}
header .wrap .top-contacts:before,
header .wrap .top-contacts:after
{
    display: table;

    content: '';
}
header .wrap .top-contacts:after
{
    clear: both;
}
header .wrap .top-contacts a
{
    font-size: 18px;
    font-weight: 300;

    color: #000;
    border-bottom: 1px dashed #000;
}
header .wrap .top-contacts a:hover
{
    border-bottom: 0;
}
header .wrap .top-contacts .adress
{
    position: relative;

    float: left;

    margin: 0 30px;
}
header .wrap .top-contacts .adress:before
{
    line-height: 10px;

    display: block;

    margin: 0 auto;

    content: url('../images/pin.svg');
    text-align: center;
}
header .wrap .top-contacts .phone
{
    font-size: 25.6px;
    font-weight: 400;
    line-height: 28px;

    float: left;

    padding-top: 5px;
}
header .wrap .cart
{
    position: relative;

    float: left;

    width: 51px;
    height: 49px;
    margin: 85px 0 0 20px;

    background: url('../images/cart.svg') no-repeat center;
}
header .wrap .cart .cart-sum
{
    font-size: 11px;
    font-weight: 600;

    position: absolute;
    top: -8px;
    right: -35px;

    padding: 5px 10px;

    white-space: nowrap;

    color: #0b0b0b;
    border-radius: 20px;
    background: #ffef2b;
}

/*# sourceMappingURL=data:application/json;base64, */
